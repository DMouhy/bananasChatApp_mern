{"version":3,"sources":["baseUrl.js","Components/Shared/ErrorMessage.js","Pages/LogSign.js","Components/Messages/Message.js","Components/Shared/Loading.js","Pages/MainApp.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","ErrorMessage","message","className","LogSign","useState","logsign_switch","set_logsign_switch","username","password","login_variables","set_loginVariables","re_password","register_variables","set_registerVariables","set_message","loading_Auth","set_loading_Auth","changeLoginVar","e","target","name","value","changeRegisterVar","onSubmit","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","json","error","setTimeout","localStorage","setItem","token","window","location","reload","catch","err","console","log","LOGIN","onChange","type","placeholder","REGISTER","onClick","Message","sent_in","user","viewed","isMine","Avatar","Loading","MainApp","search_string","set_search_string","users","set_users","rooms_go_left","set_rooms_go_left","myRoom","set_myRoom","set_user","unseen_messages","set_unseen_messages","notification_go_left","set_notification_go_left","all_Room_messages","set_all_Room_messages","loadingSearch","set_loadingSearch","loading_send_message","set_loading_send_message","loading_get_message","set_loading_get_message","inter_id","interval_id","set_interval_id","refetchUnseen_mesg","setInterval","getItem","removeItem","unseenMessages","get_Unseen_Messages","a","Empty_error","get_Room_Messages","R_id","roomId","room","useEffect","Object","entries","length","_id","fetch_Search","clearInterval","userId","yourRoom","createOrOpen_Room","map","notification","index","talked_too","key","noViewd_messages_inRoom","content","set_search","conected","RoomMessages","msg","isMsgMine","send_by","Time_created_at","room_id","send_Message","App","isLoggedIn","set_isLoggedIn","bool","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b2881e5.chunk.js","sourcesContent":["const baseUrl = \"https://bananas-chatapp.herokuapp.com\";\r\n\r\nexport default baseUrl;","import React from 'react';\r\nimport './ErrorMessage.css';\r\n\r\nfunction ErrorMessage({ message }) {\r\n    return (\r\n        <div className={`message ${!message && 'hide_message'}`} >\r\n            <p>{message}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage\r\n","import React, { useState } from 'react';\r\nimport './LogSign.css';\r\nimport { RiMessage2Fill } from 'react-icons/ri';\r\nimport baseUrl from '../baseUrl';\r\nimport ErrorMessage from '../Components/Shared/ErrorMessage';\r\n\r\nfunction LogSign() {\r\n\r\n    const [logsign_switch, set_logsign_switch] = useState(false);\r\n    const [login_variables, set_loginVariables] = useState({\r\n        username: '',\r\n        password: ''\r\n    });\r\n    const [register_variables, set_registerVariables] = useState({\r\n        username: '',\r\n        password: '',\r\n        re_password: ''\r\n    })\r\n    const [message, set_message] = useState('');\r\n    const [loading_Auth, set_loading_Auth] = useState(false);\r\n\r\n    function changeLoginVar(e){ set_loginVariables({...login_variables, [e.target.name]: e.target.value}) }\r\n\r\n    function changeRegisterVar(e){ set_registerVariables({...register_variables, [e.target.name]: e.target.value}) }\r\n\r\n    function LOGIN(e){\r\n        e.preventDefault()\r\n\r\n        set_loading_Auth(true);\r\n\r\n        fetch(`${baseUrl}/api/login`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(login_variables)\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if(res.error){\r\n                set_message(res.error)\r\n                setTimeout(() => set_message(''), 4000)\r\n                set_loading_Auth(false)\r\n            }\r\n            if(res.message){\r\n            set_message(res.message)\r\n            setTimeout(() => set_message(''), 4000)\r\n            set_loginVariables({\r\n                username: '',\r\n                password: ''\r\n            })\r\n            localStorage.setItem('token', res.token)\r\n            set_loading_Auth(false)\r\n            window.location.reload(false)\r\n            }\r\n        } )\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    function REGISTER(e){\r\n        e.preventDefault()\r\n\r\n        set_loading_Auth(true);\r\n\r\n        fetch(`${baseUrl}/api/register`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(register_variables)\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if(res.error){\r\n                set_message(res.error)\r\n                setTimeout(() => set_message(''), 4000)\r\n                set_loading_Auth(false)\r\n            }\r\n            else{\r\n            set_message(res.message)\r\n            setTimeout(() => set_message(''), 4000)\r\n            set_loginVariables({\r\n                username: register_variables.username,\r\n                password: register_variables.password\r\n            })\r\n            set_logsign_switch(false);\r\n            set_registerVariables({\r\n                username: '',\r\n                password: '',\r\n                re_password: ''\r\n            })\r\n            set_loading_Auth(false)\r\n            }\r\n        } )\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <div className='logsign'>\r\n          <ErrorMessage message={message} />\r\n            <div className='logsign_container'>\r\n                <RiMessage2Fill className='message_icon' />\r\n\r\n                <div className={`logsign_forms ${logsign_switch && 'logsign_forms_go_left'}`}>\r\n\r\n                    <form onSubmit={(e) => LOGIN(e)} className={`login_form ${logsign_switch && 'logsign_forms_hide'}`}>\r\n\r\n                        <div className=\"username\">\r\n                            <label>Username:</label>\r\n                            <input onChange={(e) => changeLoginVar(e)} type=\"text\" name='username' placeholder='your username...' value={login_variables.username} />\r\n                        </div>\r\n\r\n                        <div className=\"password\">\r\n                            <label>Password:</label>\r\n                            <input onChange={(e) => changeLoginVar(e)} type=\"password\" name='password' placeholder='your password...' value={login_variables.password} />\r\n                        </div>\r\n                        \r\n                        <button className={loading_Auth ? 'isLoading':''} type='submit'>{loading_Auth ? 'Login...' : 'Login'}</button>\r\n\r\n                    </form>\r\n\r\n                    <form onSubmit={(e) => REGISTER(e)} className={`register_form ${!logsign_switch && 'logsign_forms_hide'}`}>\r\n\r\n                        <div className=\"username\">\r\n                            <label>Username:</label>\r\n                            <input onChange={(e) => changeRegisterVar(e)} type=\"text\" name='username' placeholder='your username...' value={register_variables.username} />\r\n                        </div>\r\n\r\n                        <div className=\"password\">\r\n                            <label>Password:</label>\r\n                            <input onChange={(e) => changeRegisterVar(e)} type=\"password\" name='password' placeholder='your password...' value={register_variables.password} />\r\n                        </div>\r\n\r\n                        <div className=\"re_password\">\r\n                            <label>Repassword:</label>\r\n                            <input onChange={(e) => changeRegisterVar(e)} type=\"password\" name='re_password' placeholder='your re_password...' value={register_variables.re_password} />\r\n                        </div>\r\n\r\n                        <button className={loading_Auth ? 'isLoading':''} type='submit'>{loading_Auth ? 'Registering...' : 'Register'}</button>\r\n\r\n                    </form>\r\n\r\n                </div>\r\n                    <div onClick={() => set_logsign_switch(!logsign_switch)} className='logsign_switcher'>Switch</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LogSign\r\n","import React from 'react';\r\nimport './Message.css';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { AiOutlineCheck } from 'react-icons/ai';\r\nimport { BsCheckAll } from 'react-icons/bs';\r\n\r\nfunction Message({ sent_in, message, user, viewed, isMine }) {\r\n\r\n    return (\r\n        <div className={`message_Container ${ isMine && 'message_isMine'}`}>\r\n            \r\n            {\r\n                isMine && (\r\n                <div className=\"vue\">{viewed ? <BsCheckAll className='true' /> : <AiOutlineCheck className='false' />}</div>\r\n                )\r\n            }\r\n\r\n            <Avatar />\r\n            <div className=\"message_data\">\r\n                <div className='message_data_username'>{user.username}</div>\r\n                <div className='message_data_message'>{message}</div>\r\n                <div className='message_data_timeSend'>{sent_in}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React from 'react';\r\nimport './Loading.css';\r\nimport { VscLoading } from 'react-icons/vsc';\r\n\r\nfunction Loading({ type }) {\r\n\r\n    if(type === 'search') return (\r\n        <div className='Loading_Search'>\r\n            <VscLoading />\r\n        </div>\r\n    )\r\n    if(type === 'send_message') return (\r\n        <div className='Loading_send_message'>\r\n            <VscLoading />\r\n        </div>\r\n    )\r\n    if(type === 'get_message') return (\r\n        <div className='Loading_get_message'>\r\n            <VscLoading />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Loading\r\n","import React, { useState, useEffect } from 'react';\r\nimport './MainApp.css';\r\nimport Message from '../Components/Messages/Message';\r\nimport { Avatar } from '@material-ui/core';\r\nimport baseUrl from '../baseUrl';\r\nimport { RiMessage2Fill } from 'react-icons/ri';\r\nimport Loading from '../Components/Shared/Loading';\r\n\r\nfunction MainApp() {\r\n    const [search_string, set_search_string] = useState('');\r\n    const [users, set_users] = useState([]);\r\n    const [rooms_go_left, set_rooms_go_left] = useState(false);\r\n    const [myRoom, set_myRoom] = useState({});\r\n    const [user, set_user] = useState('');\r\n    const [unseen_messages, set_unseen_messages] = useState([]);\r\n    const [notification_go_left, set_notification_go_left] = useState(false);\r\n    const [all_Room_messages, set_all_Room_messages] = useState({});\r\n    const [message, set_message] = useState('');\r\n    \r\n    const [loadingSearch, set_loadingSearch] = useState(false);\r\n    const [loading_send_message, set_loading_send_message] = useState(false);\r\n    const [loading_get_message, set_loading_get_message] = useState(false);\r\n\r\n    const [interval_id, set_interval_id] = useState({\r\n        inter_id: 0\r\n    });\r\n    \r\n    useEffect(() => {\r\n        /* refetch messages */\r\n        if(Object.entries(myRoom).length !== 0){\r\n            if(Object.entries(all_Room_messages).length === 0){\r\n                set_loading_get_message(true)\r\n            }\r\n            get_Room_Messages(myRoom._id)\r\n            set_interval_id({\r\n                inter_id: setInterval(() => get_Room_Messages(myRoom._id), 1500)\r\n            })\r\n        }\r\n        else{\r\n            console.log('room is empty')\r\n            set_all_Room_messages({})\r\n        }\r\n    }, [myRoom])\r\n\r\n    function set_search(e){\r\n        set_search_string(e.target.value)\r\n    }\r\n\r\n    function refetchUnseen_mesg(){\r\n        setInterval(() => get_Unseen_Messages(), 3000)\r\n    }\r\n    useEffect(() => refetchUnseen_mesg(), [])\r\n\r\n    useEffect(() => {\r\n        if(search_string === ''){\r\n            users.length = 0\r\n            set_loadingSearch(false);\r\n        }  \r\n        else fetch_Search()\r\n\r\n    }, [search_string, users.length])\r\n\r\n    useEffect(() => {\r\n        if(user !== '') {\r\n            clearInterval(interval_id.inter_id)\r\n            // set_interval_id({ inter_id: 0 })\r\n            createOrOpen_Room() \r\n        }\r\n    }, [user])\r\n\r\n    function LogOut(){\r\n\r\n        const token = localStorage.getItem('token') || '';\r\n\r\n        fetch(`${baseUrl}/api/logout`, {\r\n            method: 'GET',\r\n            headers: { 'Authorization': `Bearer${token}` }\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            console.log(res.message)\r\n            localStorage.removeItem('token')\r\n            window.location.reload(false)\r\n        } )\r\n    }\r\n\r\n    async function fetch_Search(){\r\n\r\n        if(search_string !== ''){\r\n\r\n            set_loadingSearch(true);\r\n\r\n            await fetch(`${baseUrl}/api/search_user`, {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer${localStorage.getItem('token')}`\r\n                 },\r\n                body: JSON.stringify({search_string})\r\n            })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if(!res.Empty_error && !res.error){\r\n                    set_users(res)\r\n                }\r\n                set_loadingSearch(false);\r\n            } )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function createOrOpen_Room(){\r\n\r\n        const token = localStorage.getItem('token') || '';\r\n\r\n        set_all_Room_messages({})\r\n        set_loading_get_message(true)\r\n        \r\n        fetch(`${baseUrl}/api/create_room`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer${token}`\r\n            },\r\n            body: JSON.stringify({ userId: user._id })\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if(res.error){\r\n                localStorage.removeItem('token');\r\n                window.location.reload(false);\r\n            }\r\n\r\n            if(res.yourRoom){\r\n                set_myRoom(res.yourRoom)\r\n\r\n            }\r\n\r\n            if(res.myRoom){\r\n                set_myRoom(res.myRoom)\r\n            }\r\n        } )\r\n    }\r\n\r\n    function get_Unseen_Messages(){\r\n\r\n        const token = localStorage.getItem('token') || '';\r\n\r\n        fetch(`${baseUrl}/api/unseen_messages`, {\r\n            method: 'GET',\r\n            headers: { 'Authorization': `Bearer${token}` }\r\n        })\r\n        .then(res => res.json() )\r\n        .then(res => {\r\n            if(res.error){\r\n                localStorage.removeItem('token');\r\n                window.location.reload(false);\r\n            }\r\n            if(res.unseenMessages){\r\n                set_unseen_messages(res.unseenMessages);\r\n            }\r\n\r\n        } )\r\n    }\r\n\r\n    async function get_Room_Messages(R_id){\r\n\r\n        const token = localStorage.getItem('token') || '';\r\n\r\n        await fetch(`${baseUrl}/api/room_messages`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer${token}`\r\n            },\r\n            body: JSON.stringify({\r\n                roomId: R_id\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n\r\n            if(res.error){\r\n                localStorage.removeItem('token')\r\n                window.location.reload(false)\r\n            }\r\n            if(res.room){\r\n                set_all_Room_messages(res)\r\n                setTimeout(() => set_loading_get_message(false) , 2000)\r\n            }\r\n        } )\r\n    }\r\n\r\n    function send_Message(e){\r\n        e.preventDefault()\r\n        \r\n        set_loading_send_message(true)\r\n        if(Object.entries(myRoom).length !== 0 && message !== ''){\r\n            const token = localStorage.getItem('token') || '';\r\n\r\n            fetch(`${baseUrl}/api/create_message`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer${token}`\r\n                },\r\n                body: JSON.stringify({\r\n                    room_id: myRoom._id,\r\n                    message\r\n                })\r\n            })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if(res.error){\r\n                    localStorage.removeItem('token');\r\n                    window.location.reload(false)\r\n                }\r\n                if(res.message){\r\n                    set_message('')\r\n                    set_loading_send_message(false)\r\n                }\r\n            } )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='mainapp'>\r\n\r\n            <div onClick={LogOut} className=\"deconect\">\r\n                LogOut\r\n            </div>\r\n\r\n            {/* Unseen Messages */}\r\n            <div onClick={() => set_notification_go_left(!notification_go_left) }className={`notification_btn ${unseen_messages.length !== 0 && 'notification_btn_go_down'}`}><RiMessage2Fill /></div>\r\n            \r\n            {\r\n                    unseen_messages.length !== 0 && (\r\n                        <>\r\n                            <div className={`notification ${notification_go_left && 'notification_go_left'}`}>\r\n\r\n                                {\r\n                                    unseen_messages.map((notification, index) => (\r\n                                        <div onClick={() => {\r\n                                            set_user(notification.talked_too)\r\n                                            set_notification_go_left(false)\r\n                                            } \r\n                                            } key={index} className=\"notification_card\"\r\n                                        >\r\n        \r\n                                            <Avatar className='notification_avatar' />\r\n        \r\n                                            <div className='notification_messageNum' >\r\n                                                {notification.noViewd_messages_inRoom.length}\r\n                                            </div>\r\n        \r\n                                            <div className=\"notification_messages\">\r\n                                                <p className='notification_p1'>{notification.talked_too.username}</p>\r\n                                                <p className='notification_p2'>{notification.noViewd_messages_inRoom[0].content}</p>\r\n                                            </div>\r\n        \r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                \r\n                            </div>\r\n                        </>\r\n                    )\r\n                }\r\n\r\n            <div className=\"message_box\">\r\n\r\n                {/* ROOMS SEARCH */}\r\n                <div className={`rooms ${rooms_go_left && 'rooms_go_left'}`}>\r\n                    <div onClick={() => set_rooms_go_left(!rooms_go_left)} className=\"drag_point\">\r\n                        {\r\n                            loadingSearch ? <Loading type='search' />\r\n                            : <>{`${rooms_go_left ? '>': '<'}`}</>\r\n                        }\r\n                    </div>\r\n                    \r\n                    <input className='search_input' onChange={(e) => set_search(e)} type=\"text\" placeholder='search...' value={search_string} />\r\n\r\n                    {\r\n                        users && (\r\n                            <>\r\n                            {\r\n                                users.map(user => (\r\n                                    <div onClick={() => {\r\n                                        set_user(user.user)\r\n                                        set_search_string('')\r\n                                        set_rooms_go_left(false)\r\n                                        } } key={user.user._id} className=\"card\">\r\n                                        <Avatar />\r\n                                        <p>{user.user.username}</p>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                            </>\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                {/* Message BOX */}\r\n                <div className=\"header\">\r\n                    <Avatar className='avatar' />\r\n                    {\r\n                        Object.entries(myRoom).length !== 0 && (\r\n                            <>\r\n                            <p>{user.username}</p>\r\n                            {\r\n                                user.conected && <div className=\"connect_dot\"></div>\r\n                            }\r\n                            </>\r\n                        )\r\n                    } \r\n                </div>\r\n\r\n                <div className=\"room_area\">\r\n                    {\r\n                        loading_get_message ? <Loading type='get_message' />\r\n                        : (\r\n                            <>\r\n                            {\r\n                        Object.entries(all_Room_messages).length !== 0 && (\r\n                            <>\r\n                            {\r\n                                all_Room_messages.RoomMessages.map(msg => (\r\n                                    <Message\r\n                                    key={msg.msg._id} \r\n                                    isMine={msg.isMsgMine}\r\n                                    viewed={msg.msg.viewed}\r\n                                    user={msg.msg.send_by}\r\n                                    message={msg.msg.content}\r\n                                    sent_in={msg.msg.Time_created_at} \r\n                                    />\r\n                                ))\r\n                            }\r\n                            </>\r\n                        )\r\n                    }\r\n                            </>\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                <form onSubmit={(e) => send_Message(e)} className=\"send_message\">\r\n                    <input onChange={(e) => set_message(e.target.value)} className={ Object.entries(all_Room_messages).length === 0 && !user ? 'hide_sendMessage' : ''} type=\"text\" placeholder='send Message...' value={message} />\r\n\r\n                    <button type='submit' className={`send ${Object.entries(all_Room_messages).length === 0 && !user && 'hide_sendMessage'} ${loading_send_message && 'noEvent_sendMessage'}`} >\r\n                        { loading_send_message ? <Loading type='send_message' />\r\n                            :\r\n                            (<>{`>`}</>)\r\n                        }\r\n                    </button> \r\n                </form>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainApp\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport LogSign from './Pages/LogSign';\nimport MainApp from './Pages/MainApp';\nimport baseUrl from './baseUrl';\n\nfunction App() {\n\n  const [isLoggedIn, set_isLoggedIn] = useState();\n\n  useEffect(() => {\n\n    const token = localStorage.getItem('token')\n\n    fetch(`${baseUrl}/api/verify_token`, {\n      method: 'GET',\n      headers: { 'Authorization': `Bearer${token}` }\n    })\n    .then(res => res.json())\n    .then(res => {\n      if(res.bool === false){\n        set_isLoggedIn(res.bool)\n        localStorage.removeItem('token')\n      }\n      set_isLoggedIn(res.bool)\n    } )\n    .catch(err => console.log(err) )\n\n  }, [isLoggedIn])\n\n  return (\n    <div className=\"App\">\n      {\n        isLoggedIn ? <MainApp /> : <LogSign />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}